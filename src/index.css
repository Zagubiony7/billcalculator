@import url("https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Outfit:wght@100..900&family=Poetsen+One&family=Roboto+Mono:ital,wght@0,100..700;1,100..700&family=Roboto:ital,wght@0,100..900;1,100..900&family=Rubik:ital,wght@0,300..900;1,300..900&family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&family=Young+Serif&display=swap");

/* - Green 400: hsl(172, 67%, 45%)
### Neutral
- Green 900: hsl(183, 100%, 15%)
- Grey 500: hsl(186, 14%, 43%)
- Grey 400: hsl(184, 14%, 56%)
- Grey 200: hsl(185, 41%, 84%)
- Grey 50: hsl(189, 47%, 97%)
- White: hsl(0, 100%, 100%) */

:root {
  --var-default-green: hsl(172, 67%, 45%);
  --var-dark-green: hsl(183, 100%, 15%);
  --var-dark-grey: hsl(186, 14%, 43%);
  --var-medium-grey: hsl(184, 14%, 56%);
  --var-weak-grey: hsl(185, 41%, 84%);
  --var-the-weakest-grey: hsl(189, 47%, 97%);
}
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  font-size: 62.5%;
}

body {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: var(--var-weak-grey);
  padding: 2rem;
  min-height: 100vh;
  font-family: "Space Mono";
}

.container {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  border-radius: 2rem;
  background-color: #fff;
  width: 100%;
  min-height: 26rem;
}

/*@ LEFT SIDE */
.left-side {
  display: flex;
  flex-direction: column;
  gap: 10px;
  padding: 20px;
}

/*@ SELECT TIP */
menu {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 1rem;
}
button {
  transition: background-color 0.2s ease-in-out;
  cursor: pointer;
}
.left-side .btn-select,
.custom {
  border: none;
  border-radius: 5px;
  background-color: var(--var-dark-green);
  padding: 1rem;
  width: 12rem;
  color: var(--var-the-weakest-grey);
  font-weight: bold;
  font-size: 18px;
  font-family: "Space Mono";
}
.custom {
  background-color: var(--var-the-weakest-grey);
  color: var(--var-dark-green);
  letter-spacing: 1.5px;
  text-align: center;
}
.custom:focus {
  outline-color: var(--var-default-green);
}

.left-side button:hover,
.btn-select.active {
  background-color: hsl(172, 78%, 70%);
  color: var(--var-dark-green);
}

/*@ BILL AND NUMBER OF PEOPLE FIELD */
.form {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  margin: 1.5rem 0;
}
input {
  border: none;
  border-radius: 0.5rem;
  background-color: var(--var-the-weakest-grey);
  padding: 1rem 1.5rem;
  color: var(--var-dark-green);
  font-weight: bold;
  font-size: 2.6rem;
  font-family: "Space Mono";
  text-align: end;
}

input:focus {
  outline-color: var(--var-default-green);
}

label {
  display: flex;
  justify-content: space-between;
}

label,
.left-side p {
  color: var(--var-default-green);
  font-weight: bold;
  font-size: 1.8rem;
}

/*@ RIGHT SIDE */
.right-side {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  margin: 2rem;
  border-radius: 2rem;
  background-color: var(--var-dark-green);
  padding: 2rem 2.5rem;
}

.info {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.info-value {
  display: flex;
  flex-direction: column;
}
.child {
  color: #fff;
  font-size: 2.2rem;
}

.person {
  color: var(--var-medium-grey);
  font-size: 1.8rem;
}
.price {
  color: var(--var-default-green);
  font-weight: bold;
  font-size: 4.4rem;
}

.reset {
  border: none;
  border-radius: 1rem;
  background-color: var(--var-dark-grey);
  padding: 2rem;
  color: var(--var-dark-green);
  font-weight: bold;
  font-size: 1.8rem;
}

.reset.active {
  background-color: var(--var-default-green);
  color: #fff;
}

.tip-total {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

/* RESP */
@media (max-width: 788px) {
  .container {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 409px) {
  body {
    padding: 0 10rem;
    padding-left: 11.5rem;
  }
}

@media (max-width: 375px) {
  body {
    padding-left: 12rem;
  }
}

@media (max-width: 325px) {
  body {
    padding-left: 15.5rem;
  }
}

/* import { useState } from "react";
import { Info } from "./components/global/Info";
import { MyButton } from "./components/global/MyButton";
import Bill from "./components/LeftSide/Bill";
import SelectTip from "./components/LeftSide/SelectTip";
import NumberOfPeople from "./components/LeftSide/NumberOfPeople";
import LeftSide from "./components/LeftSide/LeftSide";
import RightSide from "./components/RightSide/RightSide";

const App = () => {
  const [bill, setBill] = useState<string | number>("");
  const [customTip, setCustomTip] = useState<string | number>("");
  const [tip, setTip] = useState(0);
  const [numberOfPeople, setNumberOfPeople] = useState<string | number>("");

  const handleBill = (e: React.ChangeEvent<HTMLInputElement>) => {
    setBill(+e.target.value || "");
  };

  //* DEFAULT TIP
  const handleTip = (id: string) => {
    const newTip = parseInt(id);
    setTip((currTip) => (currTip !== newTip ? newTip : 0));
    setCustomTip("");
  };

  //* CUSTOM TIP
  const handleCustom = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newCustomTip = +e.target.value;
    setTip(0);
    return newCustomTip <= 100 ? setCustomTip(newCustomTip || "") : setCustomTip(100);
  };

  //* NUMBER OF PEOPLE
  const handleNumberOfPeople = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newNumberOfPeople = +e.target.value;
    return newNumberOfPeople <= 10 ? setNumberOfPeople(newNumberOfPeople || "") : setNumberOfPeople(10);
  };

  //* PERSON AMOUNT
  let personTip: string = "";
  if (bill && tip && numberOfPeople) {
    personTip = ((+bill * tip * 0.01) / +numberOfPeople).toFixed(2);
  } else if (bill && customTip && numberOfPeople) {
    personTip = ((+bill * +customTip * 0.01) / +numberOfPeople).toFixed(2);
  }
  let total;
  if (personTip) total = Number(+bill / +numberOfPeople + +personTip).toFixed(2);

  //* RESET BUTTON
  const handleReset = () => {
    if (personTip) {
      setBill("");
      setCustomTip("");
      setTip(0);
      setNumberOfPeople("");
    }
  };

  return (
    <main className="container">
      <LeftSide>
        <Bill value={bill} onChange={handleBill} />
        <SelectTip onHandleTip={handleTip} tip={tip} value={customTip} onChange={handleCustom} />
        <NumberOfPeople value={numberOfPeople} onChange={handleNumberOfPeople} />
      </LeftSide>

      <RightSide>
        <Info price={personTip || "0.00"}>Tip Amount</Info>
        <Info price={total || "0.00"}>Total</Info>
        <MyButton className={personTip ? "reset active" : "reset"} disabled={!personTip} onClick={handleReset}>
          RESET
        </MyButton>
      </RightSide>
    </main>
  );
};

export default App;
 */
